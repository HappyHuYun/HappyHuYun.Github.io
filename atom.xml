<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>HuYun.Me</title>
  
  <subtitle>匹夫囫囩</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.huyun.me/"/>
  <updated>2020-03-02T00:28:00.000Z</updated>
  <id>https://blog.huyun.me/</id>
  
  <author>
    <name>HuYun</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>C语言入门视频教程</title>
    <link href="https://blog.huyun.me/13.html"/>
    <id>https://blog.huyun.me/13.html</id>
    <published>2020-03-02T00:28:00.000Z</published>
    <updated>2020-03-02T00:28:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>C语言是编程基础，重新来过！</p><p>视频总大小：12 GB<br>更新时间：2018年末</p><p>郝斌C语言视频教程共180集，12个单元，适合C语言初学者。</p><p>郝斌老师，瑞德学校担任教学组长，曾在雅博等公司担任项目总监。6年开发经验，擅长C/C++ 、Java、 数据结构、数据库。具有四年培训经验。</p><p>郝斌老师所录制的计算机（编程）教学视频，很适合初学者。随堂写代码，不是一味的念PPT，讲解很深入，初学者很不错的选择。</p><p>视频目录：<br>第01讲 C语言简介<br>第02讲 C语言基本编程知识<br>第03讲 C语言数据类型<br>第04讲 C语言运算符与表达式<br>第05讲 C语言流程控制（选择结构）<br>第06讲 C语言函数（循环结构）<br>第07讲 C语言运算符<br>第08讲 C语言数组<br>第09讲 C语言函数<br>第10讲 C语言指针<br>第11讲 C语言结构体和枚举<br>第12讲 C语言专题讲解<br>[附录] C语言测试题下载<br>下载地址<br>百度网盘：<a href="https://pan.baidu.com/s/1dGkkNEL" target="_blank" rel="noopener">https://pan.baidu.com/s/1dGkkNEL</a>    提取密码：94w5</p><p>视频各集内容介绍：</p><p>01 C语言概述<br>02 C语言概述之HelloWorld程序举例<br>03 C语言概述 之 起源和发展<br>04 C概述 之 C的特点<br>05 C语言概述 之 应用领域<br>06 C语言概述 之 重要性<br>07 C语言概述 之 怎样学C语言<br>08 C语言概述 之 学习目标<br>09 C语言概述 之 常见问题答疑<br>10 C语言概述 之 课程总纲要<br>11 C语言概述 之 一元二次方程详解<br>12 C语言概述 之 VC++6.0软件使用讲解<br>13 C语言概述 之 回顾本讲内容<br>14 C语言编程预备计算机专业知识<br>15 cpu 内存条 硬盘 显卡 主板 显示器 之间的关<br>16 HelloWorld程序如何运行起来的<br>17 C编程预备计算机专业知识 之 数据类型（高清<br>18 预备计算机专业知识 之 什么是变量<br>19 预备计算机专业知识 之 cpu 内存条 vc++6.0 操<br>20变量为什么必须的初始化<br>21 预备计算机专业知识 之 如何定义变量<br>22 预备计算机专业知识 之 什么叫进制<br>23 预备计算机专业知识 之 常量在C语言中是如何<br>24 预知识 之 常量以什么样的二进制代码存储在计<br>25 预备计算机专业知识 之 本讲知识回顾<br>26 预备计算机专业知识 之 代码的规范化<br>27 预备计算机专业知识 之 什么是字节<br>28 预备知识 之 不同类型数据之间相互赋值的问题<br>29 char使用常见问题解析<br>30 什么是ASCII &amp; 字符的存储<br>31 printf和scanf简介<br>32 对初学编程者的一些个人建议<br>33 printf函数的用法详解<br>34 如何编写出更有保存价值 和 更有学习价值的程<br>35_printf用法详解_2<br>36 printf为什么需要输出控制符<br>37 复习上节课内容<br>38 scanf用法 - 1：不含输入控制符的用法<br>39 scanf用法 - 2：含有非输入控制符<br>40 sacnf用法 - 3、 一次给多个变量键盘赋值<br>41 sacnf用法 - 4 ： 如何使用scanf编写出高质<br>42 运算符<br>43 运算符_2：除法与取余运算符<br>44 逻辑运算符 之 1<br>45 逻辑运算符 之 2<br>46 回顾Scanf 函数<br>47 流程控制 之1：什么是流程控制<br>48 流程控制的分类<br>49 回顾Scanf及运算符<br>50 流程控制之4：流程控制为什么重要<br>51 选择执行1：if 函数概述<br>52 选择执行2：if 函数最简单的用法<br>53 选择执行3_：if 函数的范围问题<br>54 选择执行4：if..else的用法<br>55 选择执行5：if..else ifelse..的用法<br>56 选择执行6：C语言对真假的处理<br>57 选择执行7：if 函数举例–求分数的等级<br>58 if 函数例子1：互换两个数字<br>59 if 函数子2：对任意三个数字进行排序<br>60 学习C语言常见误区<br>61 复习上机课知识<br>62 选择执行8：空语句的问题<br>63 选择执行9：if 函数常见问题解析<br>64 switch后面再讲<br>65 循环的定义<br>66 循环的分类<br>67 for循环之 1：为什么需要for循环<br>68 for循环之 2：for循环最简单的用法<br>69 for循环之 3：for和if的嵌套使用<br>70 复习上节课知识<br>71 for循环之 4：强制类型转化和对初学者很重要<br>72 for循环之 5：浮点数的存储所带来的问题<br>73 for循环之 6：for和if的嵌套使用四个习题的讲<br>74 for循环之 7：多层for循环嵌套使用执行顺序<br>75 进制<br>76 运算符补充之 1： 自增自减<br>77 运算符补充之 2： 三目运算符<br>78 运算符补充之 3：逗号表达式<br>79 for循环8：复习多个for循环嵌套使用时执行顺<br>80 复习多个for循环嵌套使用<br>81 while循环之 1： while函数的概述<br>82 while循环之 2：while函数的执行顺序<br>83 for和while的比较<br>84 如何看懂一个程序举例之1：回文数<br>85 如何看懂一个程序举例之 2：菲波拉契序列<br>86 如何看懂一个程序举例之 2：菲波拉契序列-2-<br>87 什么时候使用while，什么时候使用for<br>88 -do…while- 与 while和for的比较<br>89 一元二次方程 用do…while 实现<br>90 switch函数用法的简介<br>91 switch琐碎非重点知识介绍<br>92 break的用法<br>93 continue的用法<br>94 学C语言为什么无法做出像样东西 和 各门课程之<br>95 流程控制的总复习<br>96 流程控制的总测试<br>97 数组之 1：数组概述<br>98 数组之 2：数组的简单使用<br>99 数组之 3：为什么需要数组<br>100 数组之 4：数组之所以不是我们学习重点的原因<br>102 数组之 6：二维数组的使用<br>101 数组之 4：数组之所以不是我们学习重点的原因<br>103 数组之 7：是否存在多维数组<br>104 函数之 1：函数概述<br>105 函数之 2：函数使用简单介绍<br>106 函数之 3：为什么需要函数<br>107 函数之 4：什么是函数<br>108 函数之 5：如何定义函数<br>109 函数之6：return和break的区别<br>110 函数之 7：函数的分类<br>111 函数之 8：判断一个数字是否是素数<br>112 函数之 9：复习<br>113 函数之 10：函数的声明<br>114 函数之11：形参和实参<br>115 函数之 12：如何在开发中合理的设计函数来解<br>116 函数之 13：复习函数内容的知识<br>117 函数之 14：常用系统函数和如何通过书籍学习<br>118 函数之 15：递归<br>119 函数之 16：函数复习<br>120 函数之 17：变量的作用域和存储方式<br>121 指针之1：指针用法初次简单介绍<br>122 指针之2：指针的重要性<br>123 指针之3：什么是地址<br>124 指针之4：什么是指针<br>125 指针之5：基本类型指针<br>126 指针之6：基本类型指针常见错误解析<br>127 指针之7：经典指针程序_互换两个数字<br>128 指针之8：星号的三种含义<br>129 指针之 9 复习前面所有指针知识 实参和形参<br>130 指针之 10：通过指针为什么可以使被调函数修<br>131 指针之 11：一维数组和指针关系概述<br>132 指针之 12：下标和指针的关系<br>133 指针之 13：一维数组名的含义<br>134 指针之 14：确定一个一维数组需要2个参数及<br>135 指针之 15：复习上一节指针知识<br>136 指针之 16：指针变量的运算<br>137 指针之 17：何谓变量的地址 和 一个指针变量<br>138 指针之 18：动态内存分配概述<br>139 指针之 19：传统数组的缺点<br>140 指针之 20：为什么需要动态分配内存<br>141 指针之 21：malloc函数使用的简单介绍<br>142 指针之 22：malloc函数的用法(续)<br>143 指针之 23：动态内存分配举例(动态一维数组<br>144 指针之 24-动态内存和静态内存的比较<br>145 指针之 25：多级指针<br>146 指针之 26-复习上节课知识<br>147 指针之 27：闲聊<br>148 指针之 28：静态变量不能跨函数使用详解<br>149 指针之 29：动态内存可以跨函数使用详解<br>150 指针之 30：跨函数使用内存习题测试<br>151 结构体之 1：为什么需要结构体和什么叫结构<br>152 结构体之2：如何定义结构体<br>153 结构体之3：怎样使用结构体变量概述<br>154 结构体4-结构体的赋值和初始化<br>155 结构体5：如何取出结构体变量中的每一个成员<br>156 结构体之 6：布置作业<br>157 考前知识点概述<br>158 结构体7：复习上节课知识<br>159 结构体8：通过函数完成对结构体变量的输入和<br>160 结构体9：应该发送内容还是应该发送地址<br>161 指针优点大总结<br>162 结构体10：结构体变量的运算<br>163 冒泡排序<br>164 结构体11：综合应用_学生管理系统(存储，排<br>165 枚举（上）<br>166 枚举（下）<br>167 进制转化<br>168 补码 (上)<br>169 复习上节课补码知识<br>170 补码 (下)<br>171 链表 (上)<br>172 链表 (中)<br>173 链表 (下)<br>174 狭义的算法<br>175 广义的算法<br>176 位运算符<br>177 文件、宏和typedef<br>178 试题讲解 (上)<br>179 NULL的含义<br>180 试题讲解 (下)</p><p>记得这是大学时计算机的基础课程！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;C语言是编程基础，重新来过！&lt;/p&gt;
&lt;p&gt;视频总大小：12 GB&lt;br&gt;更新时间：2018年末&lt;/p&gt;
&lt;p&gt;郝斌C语言视频教程共180集，12个单元，适合C语言初学者。&lt;/p&gt;
&lt;p&gt;郝斌老师，瑞德学校担任教学组长，曾在雅博等公司担任项目总监。6年开发经验，擅长C/C+
      
    
    </summary>
    
    
      <category term="代码" scheme="https://blog.huyun.me/categories/code/"/>
    
    
      <category term="C语言" scheme="https://blog.huyun.me/tags/C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>强大的安卓高级终端</title>
    <link href="https://blog.huyun.me/12.html"/>
    <id>https://blog.huyun.me/12.html</id>
    <published>2020-03-01T00:28:00.000Z</published>
    <updated>2020-03-01T00:28:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>一、Termux介绍<br>二、Texmux安装<br>三、使用前一般</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一、Termux介绍&lt;br&gt;二、Texmux安装&lt;br&gt;三、使用前一般&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="代码" scheme="https://blog.huyun.me/categories/code/"/>
    
    
      <category term="Termux" scheme="https://blog.huyun.me/tags/Termux/"/>
    
  </entry>
  
  <entry>
    <title>折腾十来年老电脑</title>
    <link href="https://blog.huyun.me/11.html"/>
    <id>https://blog.huyun.me/11.html</id>
    <published>2020-02-29T00:28:00.000Z</published>
    <updated>2020-02-29T00:28:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>08年的老电脑月初折腾了个Win10给儿子上网课，偶尔用用竟然卡得一逼，于是乎折腾起Linux，于是有了这篇学习文章，装 起DeepinOS，老机换新颜！初学者，请略过不足！</p><p>一、关于Linux的分区情况</p><p>虽然硬盘分区表中最多能存储四个分区，但我们实际使用时一般只分为两个分区，一个是主分区（Primary Partion）一个是扩展分区(extended partition)两种，主分区可以马上被使用但不能再分区，扩展分区必须再进行分区后才能使用，也就是说它必须还要进行二次分区。那么由扩充分区再分下去的是什么呢？它就是逻辑分区（Logical Partion），况且逻辑分区没有数量上限制。 对习惯于使用Dos或Windows的朋友来说，有几个分区就有几个驱动器，并且每个分区都会获得一个字母标识符，然后就可以选用这个字母来指定在这个分区上的文件和目录，它们的文件结构都是独立的，非常好理解。</p><p>但是初上手Linux，可就有点恼人了。因为对Linux用户来说无论有几个分区，分给哪一目录使用，它归根结底就只有一个根目录，一个独立且唯一的文件结构。Linux中每个分区都是用来组成整个文件系统的一部分，因为它采用了一种叫“挂载点”的处理方法，它的整个文件系统中包含了一整套的文件和目录，且将一个分区和一个目录联系起来。这时要载入的一个分区将使它的存储空间在一个目录下获得。</p><p>下面我们先来看看Linux的驱动器是如何标识的。 对于IDE硬盘，驱动器标识符为“hdx1”,其中“hd”表明分区所在设备的类型，这里是指IDE硬盘了。“x”为盘号（a为基本盘，b为基本从属盘，c为辅助主盘，d为辅助从属盘）,“1”代表分区，前四个分区用数字1到4表示，它们是主分区或扩展分区，从5开始就是逻辑分区。例，hda3表示为第一个IDE硬盘上的第三个主分区或扩展分区,hdb2表示为第二个IDE硬盘上的第二个主分区或扩展分区。对于SCSI硬盘则标识为“sdx1”，SCSI硬盘是用“sd”来表示分区所在设备的类型的，其余则和IDE硬盘的表示方法一样，不再多说。</p><p>我们从上面可以看到，Linux的分区是不同于其它操作系统分区的，它的分区格式常用的有Ext4和Swap两种，Ext4用于存放系统文件，Swap则作为Linux的交换分区（相当于windows中的虚拟内存文件）。那么现在我们就可以知道Linux至少需要两个专门的分区（Linux Native（本地）和Linux Swap（交换））。由于不能将Linux安装在Dos/Windows分区。一般来说我们将Linux安装一个或多个类型为“Linux Native”的硬盘分区，但是在Linux的每一个分区都必须要指定一个“Mount Point”（挂载点），告诉Linux在启动时，这个目录要给哪个目录使用。对“Swap”分区来说,一般定义一个且它不必要定义载入点。</p><p>下面我们先对“Linux Native”和“Linux Swap”有个初步的了解。</p><p>*SWAP分区是Linux暂时存储数据的交换分区，它主要是把主内存上暂时不用得数据存起来，在需要的时候再调进内存内，且作为SWAP使用的分区不用指定“Mout Point”（载入点），既然它作为交换分区，我们理所当然应给它指定大小，它至少要等于系统上实际内存的量，一般来说它的大小是内存的一至两倍。另外你也可以创建和使用一个以上的交换分区，最多16个。</p><p>*Linux Native是存放系统文件的地方，一般用EXT4的分区类型，对Linux来说，有了较大的选择余地，可以把系统文件分几个区来装（必须要说明挂载点），也可以就装在同一个分区中（挂载点是“/”）。</p><p>二、关于挂载点情况介绍。</p><table><thead><tr><th>分区类型</th><th>介绍</th><th>备注</th></tr></thead><tbody><tr><td>swap</td><td>交换分区</td><td>一般为内存2倍，最大指定2G即可这个如果你不设置的话，会直接提示你。</td></tr><tr><td>/</td><td>根分区</td><td>存放系统命令和用户数据等。</td></tr><tr><td>/home</td><td>用户目录</td><td>用户目录，存放普通用户的数据。</td></tr><tr><td>/tmp</td><td>临时文件</td><td>方便加载ISO镜像文件使用，对于多用户系统或者网络服务器来也有独立挂载的必要。</td></tr><tr><td>/usr</td><td>文件系统</td><td>大部分的用户安装的软件程序都在这里。就像是Windows目录和Program Files目录。</td></tr><tr><td>/usr/local</td><td></td><td>自已安装程序安装在此。</td></tr><tr><td>/var</td><td>可变数据目录</td><td>包含系统运行时要改变的数据，一般多用户系统或者网络服务器要建立这个分区。</td></tr><tr><td>/opt</td><td>附加应用程序</td><td>存放可选的安装文件，个人一般把自己下载的软件资料存在里面。</td></tr><tr><td>/srv</td><td>系统服务目录</td><td>用来存放service服务启动所需的文件资料目录，不常改变。</td></tr><tr><td>/bin</td><td>二进制可执行目录</td><td>存放二进制可执行程序，里面的程序可以直接通过命令行调用，而不需要进入程序所在的文件夹。</td></tr><tr><td>/sbin</td><td>系统管理员命令存放目录</td><td>存放标准系统管理员文件。</td></tr><tr><td>/dev</td><td>存放设备文件</td><td>驱动文件等。</td></tr><tr><td>…</td><td></td><td>不再介绍…</td></tr></tbody></table><p>三、一些参考分区方案</p><p>每个人的硬盘大小都不同，自然也没有“定论”了，大致提供几种分区方案，酌情考虑！</p><p>1.服务器分区的方案</p><table><thead><tr><th>分区类型</th><th>分区大小</th><th>备注</th></tr></thead><tbody><tr><td>/</td><td>1G-2G</td><td>(最少要150–250MB)</td></tr><tr><td>/boot</td><td>32M-100M</td><td>(启动分区，最多只要100M左右)</td></tr><tr><td>/opt</td><td>100M-1G</td><td>(附加应用程序)</td></tr><tr><td>/tmp</td><td>40M-1000M</td><td>(最大可以设为1G左右,如果加载ISO镜像文件就设为4G左右吧，一般不用那么多)</td></tr><tr><td>/home</td><td>2G-10G</td><td>(每个用户100M左右，具体自定。用户目录。)</td></tr><tr><td>/usr</td><td>3G-10G</td><td>(最耗用空间的部份。最少要500M左右，一般宽松的服务器要分到4-6G)</td></tr><tr><td>/usr/local</td><td>3G-15G</td><td>(自已安装程序安装在此)</td></tr><tr><td>/var</td><td>2G-余下全部</td><td>( 最少300M-500M，一般2-3G,做服务器的话把上面余下的空间都分给它)</td></tr><tr><td>SWAP分区</td><td>2G（内存为1G）</td><td>两倍于内存的大小</td></tr></tbody></table><p>2.桌面分区方案</p><table><thead><tr><th>分区类型</th><th>分区大小</th><th>备注</th></tr></thead><tbody><tr><td>/</td><td>1G</td><td></td></tr><tr><td>/boot</td><td>32M</td><td></td></tr><tr><td>/opt</td><td>100M</td><td></td></tr><tr><td>/tmp</td><td>50M</td><td></td></tr><tr><td>/home</td><td>1G-10G</td><td></td></tr><tr><td>/usr</td><td>3G-6G</td><td></td></tr><tr><td>/usr/local 3G-5G</td><td></td><td></td></tr><tr><td>/var</td><td>500M以上</td><td></td></tr><tr><td>SWAP分区</td><td>2G（内存为1G）</td><td>两倍于内存的大小</td></tr></tbody></table><p>注意：<br>/var目录，如果是服务器，就把依上面的把其他的分区分完之后的空间全部给/var即分为最大的分区。http服务器目录/var/www,postfix服务器/var/mail.<br>一般都在/var目录里面。</p><p>因为自己也没怎么接触过Linux,对于倔强的我来说也没有研究好该如何才能完美的分区安装好系统。至少我的华硕M50VN日常用起来如同当年的新机器，现在还挂了个宝塔面板，依然溜。期待UOS-20-社区版，我不是有钱人，我是尊重知识产权的，上老下小的用付费版太奢侈！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;08年的老电脑月初折腾了个Win10给儿子上网课，偶尔用用竟然卡得一逼，于是乎折腾起Linux，于是有了这篇学习文章，装 起DeepinOS，老机换新颜！初学者，请略过不足！&lt;/p&gt;
&lt;p&gt;一、关于Linux的分区情况&lt;/p&gt;
&lt;p&gt;虽然硬盘分区表中最多能存储四个分区，但我
      
    
    </summary>
    
    
      <category term="生活" scheme="https://blog.huyun.me/categories/live/"/>
    
    
      <category term="Linux" scheme="https://blog.huyun.me/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>山野匹夫的不落阁</title>
    <link href="https://blog.huyun.me/10.html"/>
    <id>https://blog.huyun.me/10.html</id>
    <published>2020-02-28T00:28:00.000Z</published>
    <updated>2020-02-28T00:28:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>2020.02.28，HuYun.Me注册成功，立马挂上了博客…</p><p>规划很重要，要知道想做个什么出来！</p><p>Blog.HuYun.Me是一个纯静态的个人网站，页面空间国内部署在Coding，境外解析到Github，源系统是手机上的，Termux中的Node.js下的Hexo，当然还有其他Golang下的Hogo，因为没有涉足不会，惭愧！</p><p>这篇博文应该是带着自嘲色彩来写的吧，曾经的曾经也开过几年的个人网站，那是大学的时光，那时候的昵称”死灵魂”，应该是属于初恋被终结的生活片段，孤魂野鬼般的感觉吧！二00七年的大学毕业，个人主页也跟着遗失在时间的长河里，DieSoul.com也跟着遗失…</p><p>至今十二年了，厦门与龙海的两年，武汉的两年，然后的娶妻生子，然后的时光都留在了碧水老家这里，上老下小，平淡已经刻在了骨子里，无为成为了座右铭，清心寡欲似乎可以形容现在的我，平凡的幸福…</p><p>生活（live）<br>游记（tour）<br>代码（code）<br>分享（share）<br>中医（zhongyi）<br>农艺（farming）<br>暂时这样来规划内容，后期再如何那就是以后需的事咯！</p><p>今日湖北省第一次发表新型冠状病毒风险评估等级，很抱歉，咱这京山县级市大红色的高风险！加油，湖北；加油，武汉；加油，京山！加油，罗店！加油，碧水！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;2020.02.28，HuYun.Me注册成功，立马挂上了博客…&lt;/p&gt;
&lt;p&gt;规划很重要，要知道想做个什么出来！&lt;/p&gt;
&lt;p&gt;Blog.HuYun.Me是一个纯静态的个人网站，页面空间国内部署在Coding，境外解析到Github，源系统是手机上的，Termux中的No
      
    
    </summary>
    
    
      <category term="生活" scheme="https://blog.huyun.me/categories/live/"/>
    
    
      <category term="HuYun" scheme="https://blog.huyun.me/tags/HuYun/"/>
    
  </entry>
  
</feed>
